<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.nagidi.app</groupId>
	<artifactId>mywebapp</artifactId>
	<packaging>war</packaging>
	<version>1.0.0-SNAPSHOT</version>
	<name>CustomerApp Maven Webapp</name>
	<url>http://maven.apache.org</url>
<!-- Environment Settings -->
	<description />
	<inceptionYear />
	<licenses />
	<organization />
	<developers />
	<contributors />
<!-- Environment Settings -->
	<issueManagement />
	<ciManagement />
	<mailingLists />
	<scm>
		<url>scm:svn:https://wsmhd-1246.netcracker.com:8443/svn/Sandbox/CustomerApp/trunk</url>
		<developerConnection>scm:svn:https://wsmhd-1246.netcracker.com:8443/svn/Sandbox/CustomerApp/trunk</developerConnection>
		<connection>https://wsmhd-1246.netcracker.com:8443/svn/Sandbox/CustomerApp/trunk</connection>
	</scm>
	<prerequisites />
	<!-- JBoss repository for Hibernate -->
	<repositories>
		<repository>
			<id>JBoss repository</id>
			<url>http://repository.jboss.org/nexus/content/groups/public/</url>
		</repository>
	</repositories>

	<pluginRepositories>

	</pluginRepositories>
	<distributionManagement>
		<repository>
			<id>central</id>
			<name>WSMHD-1246-releases</name>
			<url>http://localhost:8080/artifactory/libs-release-local</url>
		</repository>
		<snapshotRepository>
			<id>snapshots</id>
			<name>WSMHD-1246-snapshots</name>
			<url>http://localhost:8080/artifactory/libs-snapshot-local</url>
		</snapshotRepository>
		<!-- start - location where site is deployed - username/password for site.deployments 
			in server.xml -->
		<site>
			<id>site.deployments</id>
			<name>Site deployments</name>
			<url>dav:http://localhost/sites/${artifactId}/</url>
		</site>
		<!-- end - location where site is deployed - username/password for site.deployments 
			in server.xml -->
	</distributionManagement>
	<properties>
		<org.springframework.version>4.0.3.RELEASE</org.springframework.version>
		<property name="fileExtensions" value="java" />
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<sonar.jdbc.url>jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8</sonar.jdbc.url>
		<sonar.jdbc.driverClassName>com.mysql.jdbc.Driver</sonar.jdbc.driverClassName>
		<sonar.jdbc.username>root</sonar.jdbc.username>
		<sonar.jdbc.password>root</sonar.jdbc.password>
		<sonar.host.url>http://localhost:9000</sonar.host.url>
		<!--<sonar.profile>Sun checks</sonar.profile> -->
	</properties>
	<dependencies>

		<!--<dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> 
			<version>4.11</version> <scope>test</scope> </dependency> -->

		<!--<dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-core</artifactId> 
			<version>2.3.16.2</version> <type>jar</type> <scope>compile</scope> </dependency> -->

		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-spring-plugin</artifactId>
			<version>2.5.5</version>
		</dependency>

		<!-- Struts 2 Dojo Ajax Tags -->
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-dojo-plugin</artifactId>
			<version>2.3.31</version>
		</dependency>

		<!-- Core utilities used by other modules. Define this if you use Spring 
			Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define 
			this if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, 
			spring-beans) This is the central artifact for Spring's Dependency Injection 
			Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, 
			spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjtools</artifactId>
			<version>1.6.2</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.1</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, 
			spring-aop, spring-context) Define this if you use Spring Transactions or 
			DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, 
			spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
			and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
			Define this if you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> 
			<version>1.2.17</version> <exclusions> <exclusion> <groupId>javax.mail</groupId> 
			<artifactId>mail</artifactId> </exclusion> <exclusion> <groupId>javax.jms</groupId> 
			<artifactId>jms</artifactId> </exclusion> <exclusion> <groupId>com.sun.jdmk</groupId> 
			<artifactId>jmxtools</artifactId> </exclusion> <exclusion> <groupId>com.sun.jmx</groupId> 
			<artifactId>jmxri</artifactId> </exclusion> </exclusions> <scope>runtime</scope> 
			</dependency> -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>3.6.3.Final</version>
		</dependency>



		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.12.1.GA</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>3.0-alpha-1</version>
		</dependency>


		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.9</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.5</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.5</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.5</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>mywebapp</finalName>
		<extensions>
			<!-- start - for deploying using webdav -->
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-webdav</artifactId>
				<version>1.0-beta-2</version>
			</extension>
			<!-- end - for deploying using webdav -->
		</extensions>
		<plugins>
			<!-- <plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<url>http://localhost:8080/manager/text</url>
					<server>tomcat7</server>
					<path>/mywebapp</path>
					<username>tomcat</username>
					<password>tomcat</password>
					<update>true</update>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<!--<version>6.5</version> -->
				<inherited>true</inherited>
				<configuration>
					<!-- to skip checkstyle validation set value as "true" -->
					<skip>true</skip>
					<consoleOutput>true</consoleOutput>
					<logViolationsToConsole>true</logViolationsToConsole>
					<!--want to make build fail, when checkstyle found validation error. 
						set value as "true". -->
					<failOnViolation>true</failOnViolation>
					<violationSeverity>warning</violationSeverity>
					<!-- sun_checks.xml is default checkstyle configuration from checkstyle. 
						Can add/remove validations in this file. -->
					<!-- <configLocation>checkstyle_checks.xml</configLocation> -->
				</configuration>
				<!-- the below configuration will ask maven build to execute checkstyle 
					goal -->
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<!--<version>2.0</version> -->
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.4.2</version>
				<configuration>
					<tagBase>https://wsmhd-1246.netcracker.com:8443/svn/Sandbox/CustomerApp/tags</tagBase>
					<autoVersionSubmodules>true</autoVersionSubmodules>
				</configuration>

			</plugin>

			<!-- <plugin> <groupId>org.jacoco</groupId> <artifactId>jacoco-maven-plugin</artifactId> 
				<version>0.5.5.201112152213</version> <configuration> <destFile>${basedir}/target/coverage-reports/jacoco-unit.exec</destFile> 
				<dataFile>${basedir}/target/coverage-reports/jacoco-unit.exec</dataFile> 
				</configuration> <executions> <execution> <id>jacoco-initialize</id> <goals> 
				<goal>prepare-agent</goal> </goals> </execution> <execution> <id>jacoco-site</id> 
				<phase>package</phase> <goals> <goal>report</goal> </goals> </execution> 
				</executions> </plugin> -->

			<!-- <plugin>
				<groupId>com.alexecollins.docker</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<configuration>
					<version>1.13</version>					
					<username>alexec</username>
					<password>password</password>
					<email>alex.e.c@gmail.com</email>
					<serverAddress>https://index.docker.io/v1/</serverAddress>
					<host>http://localhost:2375</host>					
					<dockerCertPath>${user.home}/.docker</dockerCertPath>					
					<removeIntermediateImages>false</removeIntermediateImages>					
					<cache>true</cache>					
					<exclude>app,other</exclude>					
					<permissionErrorTolerant>true</permissionErrorTolerant>					
					<cleanContainerOnly>false</cleanContainerOnly>					
					<saveDir>target/docker</saveDir>					
					<gzipSave>false</gzipSave>					
					<attach>false</attach>
				</configuration>
				<dependencies>
					<dependency>						
						<groupId>com.alexecollins.docker</groupId>
						<artifactId>docker-java-orchestration-plugin-boot2docker</artifactId>
						<version></version>
					</dependency>
				</dependencies>
			</plugin> -->

		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>net.sf</groupId>
				<artifactId>stat-scm</artifactId>
			</plugin>
		</plugins>
	</reporting>
	<profiles>
		<!-- <profile>
			<id>docker</id>
			<activation>
				<file>
					<exists>${basedir}/.docker</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/target</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/docker</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
								<id>process-classes</id>
								<phase>process-classes</phase>
								<configuration>
									<target>
										<chmod file="target/bin/start.sh" perm="755" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile> -->
	</profiles>
</project>
